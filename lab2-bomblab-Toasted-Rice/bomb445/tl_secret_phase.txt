-----------------------
<secret_phase>
-----------------------
callq <read_line>
 - get input

mov $0xa, %edx
mov $0x0, $esi
mov $rax, $rdi
 - args1,2,3 = read_line(), 0, 10

callq <strtol>
 - c:std function - string to long

mov %rax, %rbx
lea -0x1(%rax),(%eax)
cmp $3e8,%eax
ja <secret_phase+80>

 - long y = strtol(readline(), 0, 10)
 - int x = y-1
 - if (x > 1000) explode_bomb()

mov %ebx,%esi
lea 0x202fb4(%rip),%rdi     #n1 (root node)
callq <fun7>
 - function call to fun7(n1, y)

cmp $0x7,%eax
je <secret_phase+61>
callq <explode_bomb>
 - If the final output of func7 = 7
 - then the stage is defused, otherwise
 - the bomb explodes

-----------------------
<fun7>
-----------------------
test %rdi,%rdi
je <fun7+57>
 - If current node = null, then return -1

sub 0x8,%rsp
 - Reserve 8 bytes on the stack

mov (%rdi),%edx
 - arg3 = node->data

cmp %esi,%edx
jg  <fun7+29>
 - if(arg2 > arg3) jump   (unsigned comparison)

mov $0x0,%eax
 - int result = 0

cmp %esi,%edx
jne <fun7+42>
 - if(arg2 != arg3) jump

next line: <fun7+24>

-----------------------
<fun7+24>
-----------------------
add 0x8,$rsp
ret
 - Return memory to stack and return either 0 or fun7 return value

-----------------------
<fun7+29>
-----------------------
mov 0x8(%rdi),%rdi
callq <fun7>
add %eax,%eax
jmp <fun+24>

 - return (2 * fun7(node->left,y));

-----------------------
<fun7+42>
-----------------------
mov 0x10(%rdi),%rdi
callq <fun7>
lea 0x1(%rax,%rax,1),%eax
 - return (1 + 2 * fun7(node->right,y));
 
-----------------------
<fun7+57>
-----------------------
mov $0xffffffff,%eax
retq
 - return -1;




-----------------------
TRANSLATION INTO C CODE
-----------------------

 secret_phase()
{
    long x = strtol( readline(), 0, 10 );
    if (x-1 > 1000 || 7 != fun7(n1, x)) explode_bomb();
    return;
}

phase_7(binaryTree *node, int x)
{
    if (!node) return -1;
    unsigned n = node->value
    if (n > x) return 2 * fun7( node->left, x );
    if (n < x) return 2 * fun7( node->right, x ) + 1;
    return 0;
}



-----------------------
TREE DATA
-----------------------
n1    36  n21  n22
n21    8  n31  n32
n22   50  n33  n34
n31    6  n41  n42
n32   22  n43  n44
n33   45  n45  n46
n34  107  n47  n48
n41    1   X    X
n42    7   X    X
n43   20   X    X
n44   35   X    X
n45   40   X    X
n46   47   X    X
n47   99   X    X
n48 1001   X    X




-----------------------
TREE STRUCTURE &
FINAL RETURN VALUES
-----------------------
          36
        /    \
      8       50
    /  |      |  \
   6   22    45   107
 / |  / |   / |   | \
1  7 20 35 40 47 99 1001

|  |  |  |  |  |  |  |
|  |  |  |  |  |  |  |
|  |  |  |  |  |  |  |
V  V  V  V  V  V  V  V

0  4  2  6  1  5  3  7

